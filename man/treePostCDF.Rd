% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities-tree.R
\name{treePostCDF}
\alias{treePostCDF}
\title{Empirical CDF for tree statistic.}
\usage{
treePostCDF(tree, bins)
}
\arguments{
\item{tree}{(Optimized) differentially private tree of counts generated by dpTree$optimalPostProcess. Note that you could instead pass in the differentially private unoptimized tree
and the algorithm will still run correctly, but you will get more accurate results if you instead pass in the optimized version.}

\item{bins}{The bins of the dpTree object, which are stored as $binsByLevel.}
}
\value{
An empirical cdf that is as granular as the tree allows. The output consists of
   $bins: the values that the empirical cdf is evaluated at, which correspond to the ranges of the bins of the leaf nodes of the tree.
   $counts: the number of values that appear to the left of the corresponding value in $bins
   $proportions: the proportion of values that appear to the left of the corresponding value in $bins, i.e. proportions[i] is an approximation of Pr(x < bins[i])
}
\description{
Generates the least noisy CDF for the tree.
}
\details{
Note that for any numeric histogram, you can generate an empirical CDF for each of the maximal values of the bins by counting the number of items to the
left of that bin edge in the histogram. Here, we could do that by just using the histogram at the smallest level of the tree. This is not desirable
because you will have to sum many noisy things in order to get the counts. Instead, we can leverage the tree structure and minimize the number of counts
you need to sum for each count by traversing the tree.

For example, if a tree has bins with ranges [0,2), [2,4), [4,6), [6,8] at the leaf nodes, you could use the counts at the leaf nodes associated with [0,2) and [2,4)
to get an estimate for Pr(x < 4), or you could instead just use the count that is one level up on the tree which has range [0,4) to output this directly. Similarly,
if you want to get an estimate for Pr(x < 6), you could combine the count for [4,6) with the count for [0,4] to minimize the number of sums you must make.

There are two edge cases here: the probability of a count that is less than the minimum of the tree is always 0 as we assume that the minimum and maximum values are always true, 
and the total sum is public knowledge.

Note that you could also minimize the number of counts you need to sum for each by calculating them as a difference from the total sum, and combine these two methods to get the most
optimal value for each of the counts. (E.g. in the previous example, you could get an estimate for Pr(x < 6) from the fact that you know Pr(x<8)=1 and the [6,8] count, which would
reduce the number of noisy counts used. We do not do this here. This code could certainly be optimized further in terms of runtime efficiency as well.
}

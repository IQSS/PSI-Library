% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DP-histogram.R
\name{histogram.release}
\alias{histogram.release}
\title{Release differentially private histogram}
\usage{
histogram.release(x, var.type, n, epsilon, rng = NULL, bins = NULL,
  n.bins = NULL)
}
\arguments{
\item{x}{A vector of categorical or numeric values.}

\item{var.type}{A character vector specifying variable type of \code{x}.}

\item{n}{A numeric vector of length one specifying the number of
observations in \code{x}.}

\item{epsilon}{A numeric vector representing the epsilon privacy parameter.
Should be of length one and should be between zero and one.}

\item{rng}{A numeric vector of length two specifying the lower and upper bounds 
of \code{x}.}

\item{bins}{A vector of bins for which values are counted. Required for 
categorical types.}

\item{n.bins}{An integer specifying the number of cells in which to tabulate 
values in x. Ignored if \code{var.type \%in\% c('factor', 'categorical')}}
}
\value{
Differentially private histogram of vector \code{x}.
}
\description{
If the variable is categorical, bins are assumed to be provided by the depositor, and these bin values
used to construct the table. The vector is pre-processed so that observed levels not specified in these
bins are recoded to `NA`. Thus, any observed levels not specified in the `bins` argument show up as `NA`
in the output table. If the variable is numeric, the number of bins `n_bins` is set by the user 
optionally, else the Sturges method is used to select the number of bins given the number of observations
`n`. The bins are then constructed to be equal intervals between the provided range. The function uses 
the Laplace mechanism. If the stability mechanism improves accuracy, its value is used.
}
\examples{

# numeric types
x_num <- rnorm(100)
x_num_na <- x_num
x_num_na[sample(1:length(x_num_na), size=10, replace=FALSE)] <- NA
x_int <- as.integer(round(x_num * 20))
r_num <- histogram.release(x_num, var.type='numeric', rng=c(-2, 2), n=100, epsilon=0.1)
r_num_na <- histogram.release(x_num_na, var.type='numeric', rng=c(-2, 2), n=100, epsilon=0.1)
r_int <- histogram.release(x_int, var.type='integer', rng=c(-40, 40), n=100, epsilon=0.1)
r_num_random <- histogram.release(x_num, var.type='numeric', rng=c(-2, 2), n=100, epsilon=0.1)
# accuracy is returning inf, which filters the entire release for stability histogram
r_num_stability <- histogram.release(x_num, var.type='numeric', rng=c(-2, 2), n=100, 
   epsilon=0.1)
r_num_noisy <- histogram.release(x_num, var.type='numeric', rng=c(-2, 2), n=100, epsilon=0.1)

# categorical types
x_char <- c(rep('a', 40), rep('b', 25), rep('c', 15), rep('d', 12), rep('e', 5), rep('f', 2), 
   rep('g', 1))
x_fac <- factor(x_char)
bins <- c('a', 'b', 'c', 'd', 'e')
r_char <- histogram.release(x_char, var.type='character', n=100, epsilon=0.1, bins=bins)
r_fac <- histogram.release(x_fac, var.type='factor', n=100, epsilon=0.1, bins=bins)
}

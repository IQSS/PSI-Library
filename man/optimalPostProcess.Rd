% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities-tree.R
\name{optimalPostProcess}
\alias{optimalPostProcess}
\title{Optimal Post Processing}
\usage{
optimalPostProcess(tree, epsilon)
}
\arguments{
\item{tree}{Differentially private tree generated from dpTree$release method}

\item{epsilon}{The epsilon value used for the noise addition at each node (note this is not the same as the global epsilon value.)}
}
\value{
A list that includes:
    optimalTree: a new tree with optimized counts at each level
    wBelow: the weights used to calculate the optimized counts from the leaf nodes to the top of the tree.
    wAbove: the weights used to calculate the optimized counts from the top of the tree to the leaf nodes.
    optVariance: the variance of the optimal tree counts.

See extra_docs/tree-post-processing for more details on the meanings of wBelow, wAbove, and optVariance
}
\description{
Wrapper function that generates optimal tree from noisy tree generated with the Laplace mechanism. The general idea is that
you can leverage the fact that the child counts at each node should sum to the parent count, and a node's count should be
equal to its parent count minus the count of the adjacent child node to generate less noisy counts at every node of the tree.
}
\details{
You can think of the leveraging of child node's information to get the parent node's counts as a recursive process that
begins at the leaves of a tree, which here we refer to with the tag "Below" in the helper function names. Similarly, leveraging
a parent node and the adjacent child nodes can be thought of as a recursive process that begins with the root node, which
is referred to here with the tage "Above" in the helper function names. A new count at every node in the tree can then be calculated
using the counts that are generated in this way, which each contribute an amount according to some weight, which are calculated
by the wBelow and wAbove functions respectively.

The theory behind this is explored in detail in the Honaker paper, whose implementation here is described in extra_docs/tree-post-processing. 
The implementation here assumes that the variance of the noise added is equal at every level of the tree, which also means that the weights
wBelow and wAbove are the same for nodes at the same level of the tree. Honaker provides a more general implementation in his work.
}
\references{
Honaker, James. "Efficient Use of Differentially Private Binary Trees." (2015).
}

population_minimum <- min(population)
population_maximum <- max(population)
population_range <- range(population)
population_max_difference <- diff(range(population))
print(summary(population))
growth_rate <- 1.08
print(population * growth_rate)
growth_rates <- c(1.03, 1.05, 1.02, 1.10, 1.05)
print(population * growth_rates)
first_element <- population[1]
first_three_elements <- population[1:3]
last_element <- population[length(population)]
large_population_indicator <- population > 6
print(large_population_indicator)
print(state[large_population_indicator])
data <- list(
"population" = population,
"state" = state,
"total_population" = population_total,
"average_population" = population_average
)
print(data)
print(data$total_population)
print(data[["total_population"]])
print(data[[3]])
population_data <- data.frame(state, population, growth_rates)
print(population_data)
print(population_data$population)
print(dim(population_data))
print(nrow(population_data))
print(ncol(population_data))
population_data$counter <- 1:nrow(population_data)
population_data$population_log <- log(population_data$population)
population_data$population_t2 <- population_data$population * population_data$growth_rates
print(population_data)
height <- c(71, 64, 68, 73, 61, 75, 65, 67, 68, 70)
n <- length(height)
height_mean <- sum(height) / n                              # mean(height)
height_variance <- sum((height - height_mean)^2) / (n - 1)  # var(height)
snake_case <- 1
period.separation <- 2
lowerCamelCase <- 3
salaries <- read.table('../data/salary.dat', header=TRUE)
print(head(salaries, 10))
print(summary(salaries))
print(salaries[10, ])
print(salaries[6:10, ])
female_indicator <- salaries$sx == 'female'
female_faculty <- salaries[female_indicator, ]
print(sum(female_indicator))  # this matches what we saw in the summary
male_faculty <- salaries[!female_indicator, ]  # should have 38 rows
salary2 <- salaries[, c('sx', 'rk', 'sl')]
print(dim(salary2))
salary_female <- salaries[female_indicator, c('rk', 'sl')]
print(dim(salary_female))
salary_female <- salaries[female_indicator, 'sl']
salary_male <- salaries[!female_indicator, 'sl']
summary_female <- summary(salary_female)
summary_male <- summary(salary_male)
data.frame(rbind(summary_female, summary_male))
census <- read.csv('../data/PUMS5extract10000.csv')
print(dim(census))
print(head(census))
for (i in 1:5) {
cat('Number:', i, ' Square:', i^2, '\n')
}
length(unique(census$puma))
income_by_puma <- c()                                           # empty vector
for (puma_code in unique(census$puma)) {
code_indicator <- census$puma == puma_code                  # boolean vector
mean_this_code <- mean(census[code_indicator, 'income'])    # mean on subset
income_by_puma <- c(income_by_puma, mean_this_code)         # concatenate
}
print(summary(income_by_puma))
odds <- c()
for (i in 1:10) {
if (i %% 2 != 0) {          # note: modulo operator yields remainder
odds <- c(odds, i)      # concatenate
}
}
print(odds)
evens <- c()
odds <- c()
for (i in 1:10) {
if (i %% 2 != 0) {
odds <- c(odds, i)
} else {
evens <- c(evens, i)
}
}
print(odds)
print(evens)
education <- c()
for (puma_code in unique(census$puma)) {
code_indicator <- census$puma == puma_code
puma_subset <- census[code_indicator, ]
if (nrow(puma_subset) >= 30 && mean(puma_subset$income) > 40000) {
education <- c(education, mean(puma_subset$educ))
}
}
print(length(education))
print(summary(education))
vector_summary <- function(vec) {
n <- length(vec)
vector_mean <- mean(vec)
vector_sd <- sd(vec)
return(list(
'n' = n,
'mean' = vector_mean,
'stdev' = vector_sd))
}
print(vector_summary(census$income))
print(vector_summary(census$income)$stdev)
print(cor(census$educ, census$income))
print(cor(census[, c('age', 'educ', 'income')]))
print(t.test(income ~ sex, data=census))
linear_model <- lm(income ~ age + sex + educ + married + latino + black + asian, data=census)
linear_model$coefficients
coefficients(linear_model)
summary(linear_model)[[2]]
summary(linear_model)[[1]]
summary(linear_model)[[3]]
summary(linear_model)
summary(linear_model)[[4]]
o
logit <- glm(form, data=data, family=binomial)
form <- as.formula('y ~ x1 + x2 + x3 + x4')
logit <- glm(form, data=data, family=binomial)
p <- 1 / (1 + exp(-z))
set.seed(84723)
n <- 1000
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
x4 <- rnorm(n)
z <- -0.3 + (-1.6 * x1) + (0.3 * x2) + (0.15 * x3) + (0.75 * x4)
p <- 1 / (1 + exp(-z))
y <- rbinom(n, 1, p)
data <- data.frame(y, x1, x2, x3, x4)
form <- as.formula('y ~ x1 + x2 + x3 + x4')
logit <- glm(form, data=data, family=binomial)
print(summary(logit)$coefficients)
X <- cbind(1, x1, x2, x3, x4)
scaler <- mapMatrixUnit(X, p=2)
#source('../PSI-Library/R/mechanisms.R')
source('../PSI-Library/R/utilities.R')
X <- cbind(1, x1, x2, x3, x4)
scaler <- mapMatrixUnit(X, p=2)
X <- scaler$matrix
X <- cbind(1, x1, x2, x3, x4)
scaler <- mapMatrixUnit(X, p=2)
X <- scaler$matrix
objective <- function(theta, X, y, b, n, Delta) {
xb <- as.matrix(X) %*% as.matrix(theta)
p <- as.numeric(1 / (1 + exp(-xb)))
noise <- (b %*% as.matrix(theta)) / n
llik <- sum(y * log(p) + ((1 - y) * log(1 - p))) / n
penalty <- 0.5 * Delta * sum(theta^2)
llik.noisy <- noise + llik + penalty
return(-llik.noisy)
}
mechanism <- function(fun, X, y, n, epsilon, c, Lambda, n.boot=NULL) {
# regularizer
epsilon.prime <- epsilon - log(1 + (((2 * c) / (n * Lambda)) + (c^2 / (n^2 * Lambda^2))))
if (epsilon.prime > 0) {
Delta = u
} else {
Delta = c / (n * (exp(epsilon.prime / 4) - 1))
}
epsilon.prime = epsilon / 2
# draw noise vector b
start.params <- rep(0, ncol(X))
b.norm <- dpNoise(n=1, scale=(2 / epsilon), dist='gamma', shape=length(start.params))
b <- dpNoise(n=length(start.params), scale=(-(epsilon.prime / 2) * b.norm), dist='laplace')
# fit
release <- optim(par=start.params, fn=fun, X=X, y=y, b=b, n=n, Delta=Delta)$par
return(release)
}
check <- mechanism(objective, X, y, n, epsilon=0.5, c-0.25, Lambda=0.001)
check <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001)
check <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001)
traceback()
check <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001)
mechanism <- function(fun, X, y, n, epsilon, c, Lambda, n.boot=NULL) {
# regularizer
epsilon.prime <- epsilon - log(1 + (((2 * c) / (n * Lambda)) + (c^2 / (n^2 * Lambda^2))))
if (epsilon.prime > 0) {
Delta = 0
} else {
Delta = c / (n * (exp(epsilon.prime / 4) - 1))
}
epsilon.prime = epsilon / 2
# draw noise vector b
start.params <- rep(0, ncol(X))
b.norm <- dpNoise(n=1, scale=(2 / epsilon), dist='gamma', shape=length(start.params))
b <- dpNoise(n=length(start.params), scale=(-(epsilon.prime / 2) * b.norm), dist='laplace')
# fit
release <- optim(par=start.params, fn=fun, X=X, y=y, b=b, n=n, Delta=Delta)$par
return(release)
}
check <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001)
print(check / scaler$max.norm)
mechanism <- function(fun, X, y, n, epsilon, c, Lambda) {
# regularizer
epsilon.prime <- epsilon - log(1 + (((2 * c) / (n * Lambda)) + (c^2 / (n^2 * Lambda^2))))
if (epsilon.prime > 0) {
Delta = 0
} else {
Delta = c / (n * (exp(epsilon.prime / 4) - 1))
}
epsilon.prime = epsilon / 2
# draw noise vector b
start.params <- rep(0, ncol(X))
b.norm <- dpNoise(n=1, scale=(2 / epsilon.prime), dist='gamma', shape=length(start.params))
b <- dpNoise(n=length(start.params), scale=(-(epsilon.prime / 2) * b.norm), dist='laplace')
# fit
release <- optim(par=start.params, fn=fun, X=X, y=y, b=b, n=n, Delta=Delta)$par
return(release)
}
X <- cbind(1, x1, x2, x3, x4)
scaler <- mapMatrixUnit(X, p=2)
X <- scaler$matrix
estimates <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001) / scaler$max.norm
print(estimates)
mechanism <- function(fun, X, y, n, epsilon, c, Lambda, n.boot=NULL) {
if (is.null(n.boot)) {
epsilon.prime <- epsilon - log(1 + (((2 * c) / (n * Lambda)) + (c^2 / (n^2 * Lambda^2))))
if (epsilon.prime > 0) {
Delta = 0
} else {
Delta = c / (n * (exp(epsilon.prime / 4) - 1))
}
epsilon.prime = epsilon / 2
start.params <- rep(0, ncol(X))
b.norm <- dpNoise(n=1, scale=(2 / epsilon.prime), dist='gamma', shape=length(start.params))
b <- dpNoise(n=length(start.params), scale=(-(epsilon.prime / 2) * b.norm), dist='laplace')
release <- optim(par=start.params, fn=fun, X=X, y=y, b=b, n=n, Delta=Delta)$par
} else {
epsilon <- epsilon / n.boot
epsilon.prime <- epsilon - log(1 + (((2 * c) / (n * Lambda)) + (c^2 / (n^2 * Lambda^2))))
if (epsilon.prime > 0) {
Delta = 0
} else {
Delta = c / (n * (exp(epsilon.prime / 4) - 1))
}
epsilon.prime = epsilon / 2
boot.ests <- vector('list', n.boot)
for (i in 1:n.boot) {
index <- sample(1:n, n, replace=TRUE)
X.star <- X[index, ]
y.star <- y[index, ]
b.norm <- dpNoise(n=1, scale=(2 / epsilon.prime), dist='gamma', shape=length(start.params))
b <- dpNoise(n=length(start.params), scale=(-(epsilon.prime / 2) * b.norm), dist='laplace')
boot.ests[[i]] <- optim(par=start.params), fn=fun, X=X, y=y, b=b, n=n, Delta=Delta)$par
mechanism <- function(fun, X, y, n, epsilon, c, Lambda, n.boot=NULL) {
if (is.null(n.boot)) {
epsilon.prime <- epsilon - log(1 + (((2 * c) / (n * Lambda)) + (c^2 / (n^2 * Lambda^2))))
if (epsilon.prime > 0) {
Delta = 0
} else {
Delta = c / (n * (exp(epsilon.prime / 4) - 1))
}
epsilon.prime = epsilon / 2
start.params <- rep(0, ncol(X))
b.norm <- dpNoise(n=1, scale=(2 / epsilon.prime), dist='gamma', shape=length(start.params))
b <- dpNoise(n=length(start.params), scale=(-(epsilon.prime / 2) * b.norm), dist='laplace')
release <- optim(par=start.params, fn=fun, X=X, y=y, b=b, n=n, Delta=Delta)$par
} else {
epsilon <- epsilon / n.boot
epsilon.prime <- epsilon - log(1 + (((2 * c) / (n * Lambda)) + (c^2 / (n^2 * Lambda^2))))
if (epsilon.prime > 0) {
Delta = 0
} else {
Delta = c / (n * (exp(epsilon.prime / 4) - 1))
}
epsilon.prime = epsilon / 2
boot.ests <- vector('list', n.boot)
for (i in 1:n.boot) {
index <- sample(1:n, n, replace=TRUE)
X.star <- X[index, ]
y.star <- y[index, ]
b.norm <- dpNoise(n=1, scale=(2 / epsilon.prime), dist='gamma', shape=length(start.params))
b <- dpNoise(n=length(start.params), scale=(-(epsilon.prime / 2) * b.norm), dist='laplace')
boot.ests[[i]] <- optim(par=start.params, fn=fun, X=X, y=y, b=b, n=n, Delta=Delta)$par
}
release <- data.frame(do.call(rbind, boot.ests))
}
return(release)
}
estimates <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001, n.boot=20) / scaler$max.norm
y
#estimates <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001, n.boot=20) / scaler$max.norm
#print(estimates)
estimates <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001, n.boot=20) / scaler$max.norm
mechanism <- function(fun, X, y, n, epsilon, c, Lambda, n.boot=NULL) {
if (is.null(n.boot)) {
epsilon.prime <- epsilon - log(1 + (((2 * c) / (n * Lambda)) + (c^2 / (n^2 * Lambda^2))))
if (epsilon.prime > 0) {
Delta = 0
} else {
Delta = c / (n * (exp(epsilon.prime / 4) - 1))
}
epsilon.prime = epsilon / 2
start.params <- rep(0, ncol(X))
b.norm <- dpNoise(n=1, scale=(2 / epsilon.prime), dist='gamma', shape=length(start.params))
b <- dpNoise(n=length(start.params), scale=(-(epsilon.prime / 2) * b.norm), dist='laplace')
release <- optim(par=start.params, fn=fun, X=X, y=y, b=b, n=n, Delta=Delta)$par
} else {
epsilon <- epsilon / n.boot
epsilon.prime <- epsilon - log(1 + (((2 * c) / (n * Lambda)) + (c^2 / (n^2 * Lambda^2))))
if (epsilon.prime > 0) {
Delta = 0
} else {
Delta = c / (n * (exp(epsilon.prime / 4) - 1))
}
epsilon.prime = epsilon / 2
boot.ests <- vector('list', n.boot)
for (i in 1:n.boot) {
index <- sample(1:n, n, replace=TRUE)
X.star <- X[index, ]
y.star <- y[index]
b.norm <- dpNoise(n=1, scale=(2 / epsilon.prime), dist='gamma', shape=length(start.params))
b <- dpNoise(n=length(start.params), scale=(-(epsilon.prime / 2) * b.norm), dist='laplace')
boot.ests[[i]] <- optim(par=start.params, fn=fun, X=X.star, y=y.star, b=b, n=n, Delta=Delta)$par
}
release <- data.frame(do.call(rbind, boot.ests))
}
return(release)
}
estimates <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001, n.boot=20) / scaler$max.norm
mechanism <- function(fun, X, y, n, epsilon, c, Lambda, n.boot=NULL) {
start.params <- rep(0, ncol(X))
if (is.null(n.boot)) {
epsilon.prime <- epsilon - log(1 + (((2 * c) / (n * Lambda)) + (c^2 / (n^2 * Lambda^2))))
if (epsilon.prime > 0) {
Delta = 0
} else {
Delta = c / (n * (exp(epsilon.prime / 4) - 1))
}
epsilon.prime = epsilon / 2
b.norm <- dpNoise(n=1, scale=(2 / epsilon.prime), dist='gamma', shape=length(start.params))
b <- dpNoise(n=length(start.params), scale=(-(epsilon.prime / 2) * b.norm), dist='laplace')
release <- optim(par=start.params, fn=fun, X=X, y=y, b=b, n=n, Delta=Delta)$par
} else {
epsilon <- epsilon / n.boot
epsilon.prime <- epsilon - log(1 + (((2 * c) / (n * Lambda)) + (c^2 / (n^2 * Lambda^2))))
if (epsilon.prime > 0) {
Delta = 0
} else {
Delta = c / (n * (exp(epsilon.prime / 4) - 1))
}
epsilon.prime = epsilon / 2
boot.ests <- vector('list', n.boot)
for (i in 1:n.boot) {
index <- sample(1:n, n, replace=TRUE)
X.star <- X[index, ]
y.star <- y[index]
b.norm <- dpNoise(n=1, scale=(2 / epsilon.prime), dist='gamma', shape=length(start.params))
b <- dpNoise(n=length(start.params), scale=(-(epsilon.prime / 2) * b.norm), dist='laplace')
boot.ests[[i]] <- optim(par=start.params, fn=fun, X=X.star, y=y.star, b=b, n=n, Delta=Delta)$par
}
release <- data.frame(do.call(rbind, boot.ests))
}
return(release)
}
estimates <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001, n.boot=20) / scaler$max.norm
print(estimates)
estimates <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001, n.boot=20) / scaler$max.norm
print(apply(estimates, 2, mean))
print(apply(estimates, 2, sd))
estimates <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001, n.boot=20) / scaler$max.norm
print(apply(estimates, 2, mean))
print(apply(estimates, 2, sd))
estimates <- mechanism(objective, X, y, n, epsilon=0.5, c=0.25, Lambda=0.001, n.boot=20) / scaler$max.norm
est <- apply(estimates, 2, mean)
se <- apply(estimates, 2, sd)
out <- data.frame(est, se)
names(out) <- c('Estimate', 'Std. Error')
print(out)
install.packages("haven")
install.packages(c("apaTables", "assertthat", "backports", "bayesplot", "BH", "boot", "car", "caret", "checkmate", "cluster", "colorspace", "colourpicker", "crayon", "curl", "data.table", "DBI", "devtools", "digest", "dplyr", "dygraphs", "evaluate", "flexmix", "foreign", "formatR", "Formula", "gdata", "git2r", "glmnet", "gmp", "gridExtra", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "knitr", "lattice", "lazyeval", "lme4", "lmtest", "loo", "markdown", "MASS", "MatchIt", "Matrix", "matrixStats", "MBESS", "mcmc", "MCMCpack", "memoise", "mgcv", "mvtnorm", "nlme", "OpenMx", "pbkrtest", "PKI", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "rmarkdown", "Rmpfr", "rockchalk", "roxygen2", "rpart", "rpf", "rprojroot", "rsconnect", "rstan", "rstanarm", "rstantools", "rstudioapi", "Rvmmin", "sandwich", "scales", "scatterplot3d", "sem", "shiny", "shinyjs", "shinystan", "sourcetools", "SparseM", "StanHeaders", "stringi", "stringr", "survey", "survival", "threejs", "tibble", "tidyr", "viridis", "withr", "xts", "Zelig", "zoo"))
install.packages(c("Matrix", "mgcv"))
library(PSIlence)
devtools::install()
install.packages('devtools')
getwd()
setwd("~/Dropbox/iqss/differential_privacy/PSI-Library/)
""
"")
setwd("~/Dropbox/iqss/differential_privacy/PSI-Library/")
getwd()
devtools::install()
library(PSIlence)
data(PUMS5extract10000)
n <- 10000
epsilon <- 0.5
form <- 'income ~ educ + sex'
rng <- matrix(c(0, 200000, 1, 16, 0, 1), ncol=2, byrow=TRUE)
model <- dpGLM$new(mechanism='mechanismObjective', var.type='numeric', n=n, epsilon=epsilon, form=form, rng=rng)
library(PSIlence)
data(PUMS5extract10000)
n <- 10000
epsilon <- 0.5
form <- 'income ~ educ + sex'
rng <- matrix(c(0, 200000, 1, 16, 0, 1), ncol=2, byrow=TRUE)
model <- dpGLM$new(mechanism='mechanismObjective', var.type='numeric', n=n, epsilon=epsilon, formula=form, rng=rng)
rng
help("dpGLM")
library(PSIlence)
data(PUMS5extract10000)
n <- 10000
epsilon <- 0.5
form <- 'income ~ educ + sex'
rng <- matrix(c(0, 200000, 1, 16, 0, 1), ncol=2, byrow=TRUE)
model <- dpGLM$new(mechanism='mechanismObjective', var.type='numeric', n=n, epsilon=epsilon,
formula=form, rng=rng, objective='ols')
model$release(PUMS5extract10000)
print(model$result)
help("mechanism")
knitr::opts_knit$set(
stop_on_error = 2L
)
knitr::opts_chunk$set(
fig.height = 7,
fig.width = 7
)
n.boot <- 50
model <- dpGLM$new(mechanism=mechanism, var.type=var.type, n=n, epsilon=epsilon,
formula=form, rng=rng, objective=objective, n.boot=n.boot)
library(PSIlence)
data(PUMS5extract10000)
n <- 10000
epsilon <- 0.5
form <- 'income ~ educ + sex'
rng <- matrix(c(0, 200000, 1, 16, 0, 1), ncol=2, byrow=TRUE)
mechanism <- 'mechanismObjective'
var.type <- 'numeric'
objective <- 'ols'
model <- dpGLM$new(mechanism=mechanism, var.type=var.type, n=n, epsilon=epsilon,
formula=form, rng=rng, objective=objective)
model$release(PUMS5extract10000)
print(model$result)
n.boot <- 50
model <- dpGLM$new(mechanism=mechanism, var.type=var.type, n=n, epsilon=epsilon,
formula=form, rng=rng, objective=objective, n.boot=n.boot)
model$release(PUMS5extract10000)
print(model$result)
n.boot <- 20
model <- dpGLM$new(mechanism=mechanism, var.type=var.type, n=n, epsilon=epsilon,
formula=form, rng=rng, objective=objective, n.boot=n.boot)
model$release(PUMS5extract10000)
print(model$result)
n.boot <- 20
form <- 'sex ~ income + educ'
model <- dpGLM$new(mechanism=mechanism, var.type=var.type, n=n, epsilon=epsilon,
formula=form, rng=rng, objective='logit', n.boot=n.boot)
model$release(PUMS5extract10000)
form
model
epsilon
rng
n.boot <- 20
form <- 'sex ~ income + educ'
rng <- matrix(c(0, 1, 0, 200000, 1, 16), ncol=2, byrow=TRUE)
model <- dpGLM$new(mechanism=mechanism, var.type=var.type, n=n, epsilon=epsilon,
formula=form, rng=rng, objective='logit', n.boot=n.boot)
model$release(PUMS5extract10000)
print(model$result)
n.boot <- 20
model <- dpGLM$new(mechanism=mechanism, var.type=var.type, n=n, epsilon=epsilon,
formula=form, rng=rng, objective=objective, n.boot=n.boot)
model$release(PUMS5extract10000)
print(model$result)
library(PSIlence)
data(PUMS5extract10000)
n <- 10000
epsilon <- 0.5
form <- 'income ~ educ + sex'
rng <- matrix(c(0, 200000, 1, 16, 0, 1), ncol=2, byrow=TRUE)
mechanism <- 'mechanismObjective'
var.type <- 'numeric'
objective <- 'ols'
model <- dpGLM$new(mechanism=mechanism, var.type=var.type, n=n, epsilon=epsilon,
formula=form, rng=rng, objective=objective)
model$release(PUMS5extract10000)
print(model$result)
n.boot <- 20
model <- dpGLM$new(mechanism=mechanism, var.type=var.type, n=n, epsilon=epsilon,
formula=form, rng=rng, objective=objective, n.boot=n.boot)
model$release(PUMS5extract10000)
print(model$result)
library(PSIlence)
data(PUMS5extract10000)
n <- 10000
epsilon <- 0.5
form <- 'income ~ educ + sex'
rng <- matrix(c(0, 200000, 1, 16, 0, 1), ncol=2, byrow=TRUE)
mechanism <- 'mechanismObjective'
var.type <- 'numeric'
objective <- 'ols'
model <- dpGLM$new(mechanism=mechanism, var.type=var.type, n=n, epsilon=epsilon,
formula=form, rng=rng, objective=objective)
model$release(PUMS5extract10000)
print(model$result)
n.boot <- 20
model.boot <- dpGLM$new(mechanism=mechanism, var.type=var.type, n=n, epsilon=epsilon,
formula=form, rng=rng, objective=objective, n.boot=n.boot)
model.boot$release(PUMS5extract10000)
print(model.boot$result)
devtools::build()
devtools::install()
q()

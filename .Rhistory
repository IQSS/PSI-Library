x.num <- rnorm(100)
frequency <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = 100,
epsilon = 0.05
)
print(frequency)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(100)
frequency <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = 100,
epsilon = 0.1
)
print(frequency)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(100)
frequency <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = 100,
epsilon = 0.1
)
print(frequency)
x_char <- c(rep('a', 40), rep('b', 25), rep('c', 15), rep('d', 12), rep('e', 5), rep('f', 2), rep('g', 1))
bins <- c('a', 'b', 'c', 'd', 'e')
r_char <- histogram.release(x_char, var_type='character', n=100, epsilon=0.1, bins=bins)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(100)
frequency <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = 100,
epsilon = 0.1
)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(100)
frequency <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = 100,
epsilon = 0.1
)
traceback()
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(100)
frequency <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = 100,
epsilon = 0.1
)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(100)
frequency <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = 100,
epsilon = 0.1
)
print(frequency)
x_char <- c(rep('a', 40), rep('b', 25), rep('c', 15), rep('d', 12), rep('e', 5), rep('f', 2), rep('g', 1))
bins <- c('a', 'b', 'c', 'd', 'e')
r_char <- histogram.release(x_char, var_type='character', n=100, epsilon=0.1, bins=bins)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(100)
frequency <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = 100,
epsilon = 0.1
)
print(frequency)
x_char <- c(rep('a', 40), rep('b', 25), rep('c', 15), rep('d', 12), rep('e', 5), rep('f', 2), rep('g', 1))
bins <- c('a', 'b', 'c', 'd', 'e')
r_char <- histogram.release(x_char, var_type='character', n=100, epsilon=0.1, bins=bins)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(100)
freq1 <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = 100,
epsilon = 0.1
)
print(freq1)
x_char <- c(rep('a', 40), rep('b', 25), rep('c', 15), rep('d', 12), rep('e', 5), rep('f', 2), rep('g', 1))
bins <- c('a', 'b', 'c', 'd', 'e')
freq2 <- histogram.release(x_char, var_type='character', n=100, epsilon=0.1, bins=bins)
print(freq2)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(100)
freq1 <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = 100,
epsilon = 0.1
)
print(freq1)
x_char <- c(rep('a', 40), rep('b', 25), rep('c', 15), rep('d', 12), rep('e', 5), rep('f', 2), rep('g', 1))
bins <- c('a', 'b', 'c', 'd', 'e')
freq2 <- histogram.release(x_char, var_type='character', n=100, epsilon=0.1, bins=bins)
print(freq2)
x_char <- c(rep('a', 40), rep('b', 25), rep('c', 15), rep('d', 12), rep('e', 5), rep('f', 2), rep('g', 1))
bins <- c('a', 'b', 'c', 'd', 'e')
freq2 <- histogram.release(
x = x_char,
var_type = 'character',
n = 100,
epsilon = 0.1,
bins = bins)
print(freq2)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(100)
freq1 <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = 100,
epsilon = 0.1
)
print(freq1)
x_char <- c(rep('a', 40), rep('b', 25), rep('c', 15), rep('d', 12), rep('e', 5), rep('f', 2), rep('g', 1))
bins <- c('a', 'b', 'c', 'd', 'e')
freq2 <- histogram.release(
x = x_char,
var_type = 'character',
n = 100,
epsilon = 0.1,
bins = bins)
print(freq2)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(2000)
freq1 <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = length(x.num),
epsilon = 0.1
)
print(freq1)
x.char <- c(rep('a', 400), rep('b', 250), rep('c', 150), rep('d', 120), rep('e', 50), rep('f', 20), rep('g', 10))
bins <- c('a', 'b', 'c', 'd', 'e')
freq2 <- histogram.release(
x = x.char,
var_type = 'character',
n = length(x.char),
epsilon = 0.1,
bins = bins)
print(freq2)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(2000)
freq1 <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = length(x.num),
epsilon = 0.5
)
print(freq1)
x.char <- c(rep('a', 400), rep('b', 250), rep('c', 150), rep('d', 120), rep('e', 50), rep('f', 20), rep('g', 10))
bins <- c('a', 'b', 'c', 'd', 'e')
freq2 <- histogram.release(
x = x.char,
var_type = 'character',
n = length(x.char),
epsilon = 0.5,
bins = bins)
print(freq2)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(2000)
freq1 <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = length(x.num),
epsilon = 0.5
)
print(as.data.frame(freq1))
x.char <- c(rep('a', 400), rep('b', 250), rep('c', 150), rep('d', 120), rep('e', 50), rep('f', 20), rep('g', 10))
bins <- c('a', 'b', 'c', 'd', 'e')
freq2 <- histogram.release(
x = x.char,
var_type = 'character',
n = length(x.char),
epsilon = 0.5,
bins = bins)
print(as.data.frame(freq2))
freq2
class(freq2)
data.frame(freq2)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(2000)
freq1 <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = length(x.num),
epsilon = 0.5
)
print(as.data.frame(freq1))
x.char <- c(rep('a', 400), rep('b', 250), rep('c', 150), rep('d', 120), rep('e', 50), rep('f', 20), rep('g', 10))
bins <- c('a', 'b', 'c', 'd', 'e')
freq2 <- histogram.release(
x = x.char,
var_type = 'character',
n = length(x.char),
epsilon = 0.5,
bins = bins)
print(freq2)
data.frame(freq1)
list(freq1)
as.list(freq1)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(2000)
freq1 <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = length(x.num),
epsilon = 0.5
)
print(freq1)
x.char <- c(rep('a', 400), rep('b', 250), rep('c', 150), rep('d', 120), rep('e', 50), rep('f', 20), rep('g', 10))
bins <- c('a', 'b', 'c', 'd', 'e')
freq2 <- histogram.release(
x = x.char,
var_type = 'character',
n = length(x.char),
epsilon = 0.5,
bins = bins)
print(freq2)
source('DP-histogram.R')
set.seed(137)
x.num <- rnorm(2000)
freq1 <- histogram.release(
x = x.num,
var_type = 'numeric',
range = c(-2, 2),
n = length(x.num),
epsilon = 0.5
)
print(freq1)
x.char <- c(rep('a', 400), rep('b', 250), rep('c', 150), rep('d', 120), rep('e', 50), rep('f', 20), rep('g', 10))
bins <- c('a', 'b', 'c', 'd', 'e')
freq2 <- histogram.release(
x = x.char,
var_type = 'character',
n = length(x.char),
epsilon = 0.5,
bins = bins)
print(freq2)
install.packages("flexmix")
install.packages("gclus")
## Reproduce (partly) Table 8.1. p.255 (McLachlan and Peel, 2000)
if (require("gclus")) {
data("wine", package = "gclus")
wine_data <- as.matrix(wine[,-1])
set.seed(123)
wine_fl_diag <- initFlexmix(wine_data ~ 1, k = 3, nrep = 10,
model = FLXMCmvnorm(diagonal = TRUE))
wine_fl_fact <- lapply(1:4, function(q) flexmix(wine_data ~ 1, model =
FLXMCfactanal(factors = q, nstart = 3),
cluster = posterior(wine_fl_diag)))
sapply(wine_fl_fact, logLik)
## FULL
set.seed(123)
wine_full <- initFlexmix(wine_data ~ 1, k = 3, nrep = 10,
model = FLXMCmvnorm(diagonal = FALSE))
logLik(wine_full)
## TRUE
wine_true <- flexmix(wine_data ~ 1, cluster = wine$Class,
model = FLXMCmvnorm(diagonal = FALSE))
log
}
wine_fl_fact
data('wine')
w = as.matrix(data[,-1])
w = as.matrix(wine[,-1])
w
c = c(15, 20, 25)
s = sum(c)
p = c / p
p = c / x
p = c / s
p
FLXMCmvbinary(. = ., data = p)
library(flexmix)
FLXMCmvbinary(. = ., data = p)
FLXMCmvbinary(p ~ 1)
f = FLXMCmvbinary(p ~ 1)
f
summary(f)
f@dist
f@fit
f@fit()
plot(f)
class(F)
class(f)
rflexmix(f)
p
pr <- c(1,3,6,10) # normalization not necessary for generation
rmultinom(10, 20, prob = pr)
rmultinom(3, s, p)
s
rmultinom(, s, p)
rmultinom(1, s, p)
rmultinom(1, s, p)
rmultinom(1, s, p)
rmultinom(1, s, p)
c
r = rmultinom(1, s, p)
dmultinom(r, p=p)
p
r = vector(rmultinom(1, s, p))
r = as.vector(rmultinom(1, s, p))
r
c
r = as.vector(rmultinom(1, s, p))
dmultinom(r, p=p)
dmultinom(r, prob=p)
r = as.vector(rmultinom(1, s, p))
dmultinom(r, prob=p)
r
r = as.vector(rmultinom(1, s, p))
dmultinom(r, prob=p)
r
dmultinom(c(14, 21, 25), prob=p)
dmultinom(c(15, 20, 25), prob=p)
dmultinom(c(16, 20, 24), prob=p)
choose(60, 5)
bc = choose(60, 5)
p
ct = c(5, 13, 35, 27, 9)
sm = sum(ct)
pr = ct / sm
pr
rbinom(1, size=5, prob=pr)
rbinom(1, size=5, prob=pr)
rbinom(1, size=5, prob=pr)
rbinom(1, size=5, prob=pr)
rbinom(1, size=5, prob=pr)
rbinom(1, size=5, prob=pr)
rbinom(1, size=5, prob=pr)
rbinom(1, size=5, prob=pr)
rbinom(1, size=5, prob=pr)
rbinom(1, size=5, prob=pr)
rbinom(1, size=5, prob=pr)
pr
pr
pr
rbinom(1, size=5, prob=pr)
rbinom(1, size=10, prob=pr)
rbinom(1, size=10, prob=pr)
rbinom(1, size=10, prob=pr)
rbinom(1, size=10, prob=pr)
rbinom(5, size=10, prob=pr)
rbinom(5, size=10, prob=pr)
rbinom(5, size=10, prob=pr)
rbinom(5, size=10, prob=pr)
rbinom(5, size=10, prob=pr)
rbinom(5, size=10, prob=pr)
rbinom(s, size=10, prob=pr)
rbinom(s, size=10, prob=pr)
sum(dbinom(46:54, 100, 0.5))
rbinom(1, size=1, prob=pr)
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
ct[1]
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
rbinom(1, size=sm, prob=pr[1])
dbinom(5, prob=pr[1])
dbinom(5, size=sm, prob=pr[1])
dbinom(4, size=sm, prob=pr[1])
dbinom(6, size=sm, prob=pr[1])
dbinom(3, size=sm, prob=pr[1])
dbinom(7, size=sm, prob=pr[1])
dbinom(2, size=sm, prob=pr[1])
dbinom(8, size=sm, prob=pr[1])
dbinom(1, size=sm, prob=pr[1])
dbinom(9, size=sm, prob=pr[1])
dbinom(0, size=sm, prob=pr[1])
dbinom(10, size=sm, prob=pr[1])
dbinom(12, size=sm, prob=pr[1])
dbinom(-1, size=sm, prob=pr[1])
detach("package:gclus", unload=TRUE)
rmultinom(1, 60, p)
p
p = c(10, 25, 15)
rmultinom(1, 60, p)
rmultinom(1, sum(p), p)
rmultinom(1, sum(p), p)
rmultinom(1, sum(p), p)
as.vector(rmultinom(1, sum(p), p))
as.vector(rmultinom(1, sum(p), p))
as.vector(rmultinom(1, sum(p), p))
p <- c(10, 25, 15)
as.vector(rmultinom(1, sum(p), p))
p <- c(10, 25, 15)
as.vector(rmultinom(1, sum(p), p))
p <- c(15, 25, 10)
as.vector(rmultinom(1, sum(p), p))
as.vector(rmultinom(1, sum(p), p))
as.vector(rmultinom(1, sum(p), p))
as.vector(rmultinom(1, sum(p), p))
draws = as.vector(rmultinom(1, sum(p), p))
draws <- as.vector(rmultinom(1, sum(p), p))
draws
dmultinom(draws, p)
dmultinom(draws, prob=p)
dens <- dmultinom(draws, prob=p)
dens
draws
draws <- as.vector(rmultinom(1, size=sum(p), prob=p))
draws
draws <- as.vector(rmultinom(2, size=sum(p), prob=p))
draws
draws <- t(rmultinom(2, size=sum(p), prob=p))
draws
draws <- t(rmultinom(1, size=sum(p), prob=p))
draws
dens <- dmultinom(draws, prob=p)
dens
draws
draws <- t(rmultinom(2, size=sum(p), prob=p))
dens <- dmultinom(draws, prob=p)
q()
install.packages("mvtnorm")
library(devtools)
devtools::install_github("rmcelreath/rethinking")
q()
install.packages("CDF.PSIdekick")
library("CDF.PSIdekick", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
vec <- rnorm(mean = 10, sd = 3, n = 100) * 5000
vec
eps = 0.54
eps = 0.5
f = 2
d = 5
m = 'H'
mn = 20000
mx = 80000
d = ceiling((mx - mn) / gran + 1)
gran = 2000
d = ceiling((mx - mn) / gran + 1)
d
TreeCDF(eps, d, 2, m, mn, mx, gran, vec)
o = TreeCDF(eps, d, 2, m, mn, mx, gran, vec)
hist(o)
cumsum(o)
hist(vec)
o
o = TreeCDF(eps, d, 2, m, mn, mx, gran, vec)
o
plot(cumsum(o))
install.packages("ggthemes")
getwd()
setwd('~/Dropbox/iqss/differential_privacy/PSI-Library/')
library(devtools)
build()
install()
library(PSIlence)
mean.release
mean.release(rnorm(100), 'numeric', 100, 0.5, c(-2, 2))
?mean.release
PSIlence::mean.release
document()
document()
document()
document()

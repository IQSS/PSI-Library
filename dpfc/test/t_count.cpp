
#include "dpfc/count.hpp"

#include "gtest/gtest.h"
#include "sodium.h"

#include <memory>
#include <stdexcept>


using dpfc::CountSample;
using std::logic_error;
using std::make_unique;
using std::runtime_error;
using std::unique_ptr;

// used for testing CountSample
class TestSample : public CountSample {
	public:
		TestSample(const unsigned long n, const mpq_class& eps) : CountSample(n, eps) {
			this->d = 4;
		}

		mpz_class getPow2k() {
			return this->pow_2k;
		}

		// The distribution gives one unit of mass to each of {0, n/2, n} and an addition unit of mass
		// is given to the center.
		mpz_class pdf(const unsigned long c, const unsigned long z) const {
			mpz_class v;
			if (z == 0 || z == this->n) {
				v++;
			}
			if (z == this->n / 2) {
				v++;
			}
			if (z == c) {
				v++;
			}
			return v;
		}

		mpz_class cdf(const unsigned long c, const unsigned long z) const override {
			mpz_class rop;
			for (int i = 0; i <= z; i++) {
				rop += this->pdf(c, i);
			}
			return rop;
		}

		unsigned long accuracy(const mpq_class& beta) const override {
			return 0;
		}
};

TEST(CountSample, Init) {
	EXPECT_THROW(TestSample(12345, mpq_class(0, 1)), logic_error);
	EXPECT_THROW(TestSample(67890, mpq_class(-1, 2)), logic_error);
	EXPECT_THROW(TestSample(10, mpq_class(2, 1)), logic_error);
	EXPECT_THROW(TestSample(0, mpq_class(3, 8)), logic_error);

	unique_ptr<TestSample> cs = make_unique<TestSample>(1, mpq_class(2, 5));
	EXPECT_EQ(cs->getPow2k(), 8);
}

TEST(CountSample, Get) {
	unsigned long n = 101;
	mpq_class eps(1, 3);
	unique_ptr<CountSample> cs = make_unique<TestSample>(n, eps);

	EXPECT_EQ(cs->get_n(), n);
	EXPECT_EQ(cs->get_eps(), eps);
	EXPECT_EQ(cs->get_d().get_ui(), 4);
}

TEST(CountSample, Sample) {
	int n = 20;
	unique_ptr<CountSample> cs = make_unique<TestSample>(n, mpq_class(1, 5));

	int rop[4] = {0, 0, 0, n};
	for (int c = 0; c <= n; c++) {
		rop[1] = (c < n / 2) ? c : n / 2;
		rop[2] = (c < n / 2) ? n / 2 : c;

		for (int r = 1; r <= 4; r++) {
			EXPECT_EQ(cs->sample(c, r), rop[r-1]);
		}
	}

	unsigned long draw = cs->sample(0);
	EXPECT_GE(draw, 0);
	EXPECT_LE(draw, n);
}

TEST(CountSample, Threshold) {
	// delta = 10^-15
	mpq_class eps(1, 10), delta("1/2000000000000000");
	unique_ptr<CountSample> cs = make_unique<GeoSample>(10000, eps);
	EXPECT_EQ(cs->threshold(delta), 1123);

	cs = make_unique<FastSample>(100000, eps, mpq_class(1, 1000));
	delta = "1/20000000";
	EXPECT_EQ(cs->threshold(delta), 99995);
}

TEST(GeoSample, Init) {
	unique_ptr<GeoSample> gs = make_unique<GeoSample>(40, mpq_class(1, 100));

	mpz_class d("49832098353423633876598893050082726751736143381818956179596796889398552480154243331"
			"03703344228609");
	EXPECT_EQ(gs->get_d(), d);
}

TEST(GeoSample, Cdf) {
	unique_ptr<CountSample> gs = make_unique<GeoSample>(31, mpq_class(3, 20));

	mpz_class rop;
	rop = "102866003962020852339281955230023942144";
	EXPECT_EQ(gs->cdf(10, 5), rop);

	rop = "189669022683822961227811682566002118913";
	EXPECT_EQ(gs->cdf(0, 8), rop);

	rop = "270384368951887263366282033950143222017";
	EXPECT_EQ(gs->cdf(10, 31), rop);
}

TEST(GeoSample, Accuracy) {
	unique_ptr<CountSample> gs = make_unique<GeoSample>(101010, mpq_class(3, 100));

	EXPECT_THROW(gs->accuracy(mpq_class(0, 1)), logic_error);
	EXPECT_THROW(gs->accuracy(mpq_class(-1, 2)), logic_error);
	EXPECT_THROW(gs->accuracy(mpq_class(11, 10)), logic_error);

	mpq_class beta(7, 1000);
	EXPECT_EQ(gs->accuracy(beta), 638);

	// set beta to 3 / (2^10000 + 1)
	beta = "3/1";
	mpz_setbit(beta.get_den().get_mpz_t(), 10000);
	EXPECT_EQ(gs->accuracy(beta), 101010);
}

TEST(FastSample, Init) {
	EXPECT_THROW(FastSample(10, mpq_class(3, 8), mpq_class(-1, 2)), logic_error);
	EXPECT_THROW(FastSample(839320, mpq_class(31, 141), mpq_class(0, 1)), logic_error);
	EXPECT_THROW(FastSample(1123, mpq_class(10, 11), mpq_class(109, 3218)), logic_error);
	EXPECT_THROW(FastSample(77, mpq_class(1,2), mpq_class(11, 10)), logic_error);

	mpq_class eps(2, 19), gamma(1, 100);
	unique_ptr<CountSample> fs = make_unique<FastSample>(3000, eps, gamma);

	mpz_class d("12584842213535578306885909671868813522030390375196091846672242014846757204267406109"
			"63480736110996849845682157491132051181925889102400672746582175762257008404378918959489653"
			"75104674421803847262000026358757353101229081477038212605623867449998733334579468307857456"
			"65318642759402150622754484531312605615453378607216496750647559133213135234579514541757240"
			"56711496650610862510649989325427254955669795890053827002846050423392433362572158826664772"
			"33476768859151598327049933902524445570549460412539170583909146493858061189916829090642511"
			"54510087079213415145603996384307351769224922965878892347248489886413797890792398808184889"
			"80869600219451197044240056132265821174658980295271049329300977286186776703097550988584684"
			"52742731522666356080553307604598943176783252643712092571956643552644236889197630794782675"
			"30708537152235041070071033742666749889102456713605208761978386856911050289619275706775672"
			"23184538988301972557738122162194481985382146531900243381407363306049332149341533939944647"
			"53144099121980282579338831276814309622940219351691741317244427337845305866285684629324984"
			"78917217397140644453826192557271911358931453967949019675080658097725746415135701347444727"
			"85319433225283534005254293979324772175556733356591587517798194535033323965534879210783911"
			"68608904425138171280860208749202952489478890102621423175868511868108896371009541464935013"
			"70189737963490643531149692890127252120156603432879826427149740713877688905432915476909374"
			"58239644637069639235557894169164695659373340065460379282167751038126757974142086115503483"
			"46072175934132930602819195887512067738092249070982545130120551535389881891840233127480525"
			"70383084468612220693205537911546837231325038522085924784948679526803074040851051054747546"
			"714972546293124882408726386500");
	EXPECT_EQ(fs->get_d(), d);
}

TEST(FastSample, Get) {
	mpq_class eps(1, 100), gamma(1, 100);
	unique_ptr<FastSample> fs = make_unique<FastSample>(10, eps, gamma);

	EXPECT_EQ(fs->get_gamma(), gamma);
}

TEST(FastSample, Cdf) {
	mpq_class eps(3, 20), gamma(1, 21);
	unique_ptr<CountSample> fs = make_unique<FastSample>(2500, eps, gamma);

	mpz_class rop;
	rop = "98511948095956383806189403149997596298995062795712767388122664628591391291160622566057910"
		"73595320952600779063198889357433273882327696754361944690713366837445455065478136937717071289"
		"60889667065954697988204607217191110867743819682286725848695365522356120432793676666606314200"
		"21039408678327661708729658384258506703790667251631230031727402140789418883002291145150975147"
		"28092633720701439849802672358688614794281033025303838785587009863056863401854243734285418754"
		"12668625634275705386516385991505916475386722210137457180494714994392677781809871193594196126"
		"01182277521949989057508054419845880705097429539473383256935839736510667007158017842663467289"
		"74641499101080103344322583024585255248240980533974572002616806072294709531075362113512585831"
		"99688918588596876381927151141811675624343292781143189977093540594504524993734725447082671654"
		"143108134365928365323275340613";
	EXPECT_EQ(fs->cdf(2000, 100), rop);

	rop = "12690872236381486527132994323444806857999119434977670382923803296557055534115940084223525"
		"98098967901556331741213308551933908400580665402990041818313202919230981974451343877132870219"
		"25443874654552175880946752982413269358532906481281675448573336650805361988927081994502646737"
		"12154767385808750942114332531195957229596364795071761875415323357720070502119060255226567684"
		"86364464052882374463388780393213687302791728088876289412709560030768655297704069412683380329"
		"27911605418964958035355272243356314992856599707881700808955990593070938095086552264548095249"
		"76592255202350327197639316453682139604431902705073582601338763811842856342058789615577737806"
		"98936566225599894103000563978333806185431382345921015586166079012393797262189143023315919889"
		"08873383469958494273045238312450194024464008547712365413960107417256556793804076428651146764"
		"80273986239347738052569296044533";
	EXPECT_EQ(fs->cdf(1500, 1300), rop);

	rop = "25524229988919694653528300092283865547744855512923391624190237692630692290911438437236447"
		"89361946397987916032862908604359455017363465008382920228115043628546033137901181253983290842"
		"31760695114545394857024632461866820424903793510761428349826449812073575488457978190618406550"
		"00457458452889537852526823535863381755492419732387119001876009758222895321664457757457658106"
		"26067736914162948203079164318681390629420072141231526596532694743679486738383713495209835540"
		"34037959762659798258908912918756479013342316060973324976291671014392718529288627272890766005"
		"61014518877418895645186676430644154780674931847958186367328723392653641069957392582225810859"
		"70226414766727755340195035866449604052983777471307350297414761020998139305663596871504298005"
		"40404055964839154447994568772276700153539866697734646884044148905838255519295301746483990037"
		"471258360638476440650103784673173";
	EXPECT_EQ(fs->cdf(400, 400), rop);

	rop = "51129651793446827678259947549762613817719011750634247319334437648469201216573574213221007"
		"31375646729270152864078702762435739110747526649112945570612726762234932673142865509030362317"
		"55037596408558526962769046682498764582158403678862895601133264911360694942648290341981877194"
		"94286206359669449053795222001596189900192183841561987222704773738834872547186763407128309586"
		"09518256953196932459074315719948672040901049823954975574052045980507958776124765453415603331"
		"78292099251231353980857182871888432154022251138392234087710034205158995663368863939003973813"
		"08579962078991488875085442779631098142989231226621130927839937176511145298833964884458035829"
		"66135465587898218786264694304275085795723172678925554841080946446690702656717837201509339226"
		"72385077240919176800168348415890196513898017335448585760289311797074472323728396461995254760"
		"216196747639567632065459570596773";
	EXPECT_EQ(fs->cdf(500, 2400), rop);

	EXPECT_EQ(fs->cdf(0, fs->get_n()), fs->get_d());
}

TEST(FastSample, Accuracy) {
	mpq_class eps(1, 17), gamma(1, 500);
	unique_ptr<CountSample> fs = make_unique<FastSample>(500, eps, gamma);

	EXPECT_THROW(fs->accuracy(gamma), logic_error);
	EXPECT_THROW(fs->accuracy(mpq_class(1, 501)), logic_error);
	EXPECT_THROW(fs->accuracy(mpq_class(11, 10)), logic_error);

	mpq_class beta(9, 1000);
	EXPECT_EQ(fs->accuracy(beta), 320);

	// set gamma to 1/(2^20001 + 1) and beta to 3/(2^20000 + 1)
	eps = "4/7";
	gamma = "1/1";
	mpz_setbit(gamma.get_den().get_mpz_t(), 20001);

	beta = "3/1";
	mpz_setbit(beta.get_den().get_mpz_t(), 20000);

	fs = make_unique<FastSample>(100000, eps, gamma);
	EXPECT_EQ(fs->accuracy(beta), 62122);
}

int main(int argc, char **argv) {
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}

